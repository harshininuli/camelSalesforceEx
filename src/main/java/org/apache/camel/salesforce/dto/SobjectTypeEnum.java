/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Mon Mar 02 02:58:34 EST 2015
 */
package org.apache.camel.salesforce.dto;

import org.codehaus.jackson.annotate.JsonCreator;
import org.codehaus.jackson.annotate.JsonValue;

/**
 * Salesforce Enumeration DTO for picklist SobjectType
 */
public enum SobjectTypeEnum {

    // Account
    ACCOUNT("Account"),
    // AddOnDefinition
    ADDONDEFINITION("AddOnDefinition"),
    // AggregationRow
    AGGREGATIONROW("AggregationRow"),
    // Asset
    ASSET("Asset"),
    // Campaign
    CAMPAIGN("Campaign"),
    // Case
    CASE("Case"),
    // Certification
    CERTIFICATION("Certification"),
    // CertificationDef
    CERTIFICATIONDEF("CertificationDef"),
    // CertificationSectionDef
    CERTIFICATIONSECTIONDEF("CertificationSectionDef"),
    // CertificationStep
    CERTIFICATIONSTEP("CertificationStep"),
    // CertificationStepDef
    CERTIFICATIONSTEPDEF("CertificationStepDef"),
    // CloudServiceProvider
    CLOUDSERVICEPROVIDER("CloudServiceProvider"),
    // CloudServiceProviderApi
    CLOUDSERVICEPROVIDERAPI("CloudServiceProviderApi"),
    // Contact
    CONTACT("Contact"),
    // Contract
    CONTRACT("Contract"),
    // ContractLineItem
    CONTRACTLINEITEM("ContractLineItem"),
    // DandBCompany
    DANDBCOMPANY("DandBCompany"),
    // Document
    DOCUMENT("Document"),
    // DuplicateRecordSet
    DUPLICATERECORDSET("DuplicateRecordSet"),
    // EditionDefinition
    EDITIONDEFINITION("EditionDefinition"),
    // Entitlement
    ENTITLEMENT("Entitlement"),
    // EntitlementContact
    ENTITLEMENTCONTACT("EntitlementContact"),
    // EnvironmentHubInvitation
    ENVIRONMENTHUBINVITATION("EnvironmentHubInvitation"),
    // EnvironmentHubMember
    ENVIRONMENTHUBMEMBER("EnvironmentHubMember"),
    // FtestAccountChild
    FTESTACCOUNTCHILD("FtestAccountChild"),
    // FtestChild
    FTESTCHILD("FtestChild"),
    // FtestError
    FTESTERROR("FtestError"),
    // FtestErrorChild
    FTESTERRORCHILD("FtestErrorChild"),
    // FtestGrandChild
    FTESTGRANDCHILD("FtestGrandChild"),
    // FtestHiddenName
    FTESTHIDDENNAME("FtestHiddenName"),
    // FtestMain
    FTESTMAIN("FtestMain"),
    // FtestPerson
    FTESTPERSON("FtestPerson"),
    // FtestVirtualMain
    FTESTVIRTUALMAIN("FtestVirtualMain"),
    // Goal
    GOAL("Goal"),
    // GoalLink
    GOALLINK("GoalLink"),
    // Idea
    IDEA("Idea"),
    // IdeaTheme
    IDEATHEME("IdeaTheme"),
    // IncludedLicenseDefinition
    INCLUDEDLICENSEDEFINITION("IncludedLicenseDefinition"),
    // Lead
    LEAD("Lead"),
    // LicensingError
    LICENSINGERROR("LicensingError"),
    // LicensingRequest
    LICENSINGREQUEST("LicensingRequest"),
    // LiveAgentSession
    LIVEAGENTSESSION("LiveAgentSession"),
    // LiveChatTranscript
    LIVECHATTRANSCRIPT("LiveChatTranscript"),
    // LiveChatVisitor
    LIVECHATVISITOR("LiveChatVisitor"),
    // Macro
    MACRO("Macro"),
    // ManagementAddOnLicense
    MANAGEMENTADDONLICENSE("ManagementAddOnLicense"),
    // ManagementEditionLicense
    MANAGEMENTEDITIONLICENSE("ManagementEditionLicense"),
    // ManagementPlatformLicense
    MANAGEMENTPLATFORMLICENSE("ManagementPlatformLicense"),
    // ManagementUserLicense
    MANAGEMENTUSERLICENSE("ManagementUserLicense"),
    // Metric
    METRIC("Metric"),
    // MetricDataLink
    METRICDATALINK("MetricDataLink"),
    // MyCustomObject
    MYCUSTOMOBJECT("MyCustomObject"),
    // Opportunity
    OPPORTUNITY("Opportunity"),
    // Order
    ORDER("Order"),
    // PersonKey
    PERSONKEY("PersonKey"),
    // PlatformLicenseDefinition
    PLATFORMLICENSEDEFINITION("PlatformLicenseDefinition"),
    // Pricebook2
    PRICEBOOK2("Pricebook2"),
    // Product2
    PRODUCT2("Product2"),
    // ProfileSkill
    PROFILESKILL("ProfileSkill"),
    // ProfileSkillEndorsement
    PROFILESKILLENDORSEMENT("ProfileSkillEndorsement"),
    // ProfileSkillUser
    PROFILESKILLUSER("ProfileSkillUser"),
    // PushTopic
    PUSHTOPIC("PushTopic"),
    // Question
    QUESTION("Question"),
    // QuickText
    QUICKTEXT("QuickText"),
    // Quote
    QUOTE("Quote"),
    // RegisteredMobileDevice
    REGISTEREDMOBILEDEVICE("RegisteredMobileDevice"),
    // ServiceContract
    SERVICECONTRACT("ServiceContract"),
    // SignupRequest
    SIGNUPREQUEST("SignupRequest"),
    // SocialPost
    SOCIALPOST("SocialPost"),
    // Solution
    SOLUTION("Solution"),
    // SOSSession
    SOSSESSION("SOSSession"),
    // StreamingChannel
    STREAMINGCHANNEL("StreamingChannel"),
    // Tenant
    TENANT("Tenant"),
    // TenantParameterMap
    TENANTPARAMETERMAP("TenantParameterMap"),
    // UsageEntitlement
    USAGEENTITLEMENT("UsageEntitlement"),
    // UserLicenseDefinition
    USERLICENSEDEFINITION("UserLicenseDefinition"),
    // WorkCoaching
    WORKCOACHING("WorkCoaching"),
    // WorkFeedback
    WORKFEEDBACK("WorkFeedback"),
    // WorkFeedbackQuestion
    WORKFEEDBACKQUESTION("WorkFeedbackQuestion"),
    // WorkFeedbackQuestionSet
    WORKFEEDBACKQUESTIONSET("WorkFeedbackQuestionSet"),
    // WorkFeedbackRequest
    WORKFEEDBACKREQUEST("WorkFeedbackRequest"),
    // WorkFeedbackTemplate
    WORKFEEDBACKTEMPLATE("WorkFeedbackTemplate"),
    // WorkGoal
    WORKGOAL("WorkGoal"),
    // WorkGoalCollaborator
    WORKGOALCOLLABORATOR("WorkGoalCollaborator"),
    // WorkGoalLink
    WORKGOALLINK("WorkGoalLink"),
    // WorkPerformanceCycle
    WORKPERFORMANCECYCLE("WorkPerformanceCycle"),
    // WorkReward
    WORKREWARD("WorkReward"),
    // WorkRewardFund
    WORKREWARDFUND("WorkRewardFund"),
    // WorkRewardFundType
    WORKREWARDFUNDTYPE("WorkRewardFundType"),
    // WorkUpgradeAction
    WORKUPGRADEACTION("WorkUpgradeAction"),
    // WorkUpgradeCustomer
    WORKUPGRADECUSTOMER("WorkUpgradeCustomer"),
    // WorkUpgradeUser
    WORKUPGRADEUSER("WorkUpgradeUser");

    final String value;

    private SobjectTypeEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static SobjectTypeEnum fromValue(String value) {
        for (SobjectTypeEnum e : SobjectTypeEnum.values()) {
            if (e.value.equals(value)) {
                return e;
            }
        }
        throw new IllegalArgumentException(value);
    }

}
